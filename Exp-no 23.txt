#include <stdio.h>
#include <stdlib.h>

#define MAX_BLOCKS 10

// Structure to represent a memory block
typedef struct {
    int block_id;
    int size;
    int allocated;
} MemoryBlock;

// Function to initialize memory blocks
void initializeMemoryBlocks(MemoryBlock memory[], int n) {
    for (int i = 0; i < n; ++i) {
        memory[i].block_id = i + 1;
        memory[i].size = rand() % 100 + 1; // Random size between 1 and 100
        memory[i].allocated = 0;
    }
}

// Function to print memory blocks
void printMemoryBlocks(MemoryBlock memory[], int n) {
    printf("Memory Blocks:\n");
    printf("Block ID\tSize\tAllocated\n");
    for (int i = 0; i < n; ++i) {
        printf("%d\t\t%d\t%s\n", memory[i].block_id, memory[i].size,
               memory[i].allocated ? "Yes" : "No");
    }
    printf("\n");
}

// Function to allocate memory using First Fit algorithm
void allocateMemoryFirstFit(MemoryBlock memory[], int n, int process_size) {
    // Find the first free block that can accommodate the process
    for (int i = 0; i < n; ++i) {
        if (!memory[i].allocated && memory[i].size >= process_size) {
            printf("Allocated memory of size %d to process.\n", process_size);
            memory[i].allocated = 1;
            return;
        }
    }

    // If no suitable block is found
    printf("Not enough memory available for process of size %d.\n", process_size);
}

int main() {
    MemoryBlock memory[MAX_BLOCKS];
    int num_blocks = MAX_BLOCKS;
    int process_size;

    // Initialize memory blocks
    initializeMemoryBlocks(memory, num_blocks);

    // Print initial memory status
    printf("Initial Memory Status:\n");
    printMemoryBlocks(memory, num_blocks);

    // Example: Allocate memory for processes
    process_size = 50;
    allocateMemoryFirstFit(memory, num_blocks, process_size);

    process_size = 80;
    allocateMemoryFirstFit(memory, num_blocks, process_size);

    process_size = 30;
    allocateMemoryFirstFit(memory, num_blocks, process_size);

    // Print final memory status
    printf("Final Memory Status:\n");
    printMemoryBlocks(memory, num_blocks);

    return 0;
}
