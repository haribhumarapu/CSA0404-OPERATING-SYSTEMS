#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 10

typedef struct {
    int process_id;
    int priority;
    int burst_time;
    int arrival_time;
    int remaining_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
} Process;

int findHighestPriority(Process processes[], int n, int current_time) {
    int highest_priority = -1;
    int highest_priority_idx = -1;

    for (int i = 0; i < n; i++) {
        if (processes[i].arrival_time <= current_time && processes[i].remaining_time > 0) {
            if (highest_priority == -1 || processes[i].priority < highest_priority) {
                highest_priority = processes[i].priority;
                highest_priority_idx = i;
            }
        }
    }

    return highest_priority_idx;
}

void calculateTimes(Process processes[], int n) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    printf("Process\tArrival Time\tPriority\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");

    int current_time = 0;
    int completed_processes = 0;
    while (completed_processes < n) {
        int highest_priority_idx = findHighestPriority(processes, n, current_time);
        if (highest_priority_idx == -1) {
            current_time++;
            continue;
        }

        Process *current_process = &processes[highest_priority_idx];
        current_process->remaining_time--;

        if (current_process->remaining_time == 0) {
            current_process->completion_time = current_time + 1;
            current_process->turnaround_time = current_process->completion_time - current_process->arrival_time;
            current_process->waiting_time = current_process->turnaround_time - current_process->burst_time;

            total_waiting_time += current_process->waiting_time;
            total_turnaround_time += current_process->turnaround_time;

            completed_processes++;
        }

        current_time++;
    }

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].arrival_time,
               processes[i].priority, processes[i].burst_time, processes[i].completion_time,
               processes[i].turnaround_time, processes[i].waiting_time);
    }

    printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter arrival time, priority, and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        processes[i].process_id = i + 1;
        printf("Arrival time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    calculateTimes(processes, n);

    return 0;
}
