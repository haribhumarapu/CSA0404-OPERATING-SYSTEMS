#include <stdio.h>

#define MAX_PROCESSES 10

typedef struct {
    int process_id;
    int priority;
    int burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
} Process;

void calculateTimes(Process processes[], int n) {
    int total_waiting_time = 0;
    int total_turnaround_time = 0;

    printf("Process\tPriority\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");

    int current_time = 0;
    for (int i = 0; i < n; i++) {
        int highest_priority_idx = -1;
        int highest_priority = -1;

        // Find the process with the highest priority
        for (int j = 0; j < n; j++) {
            if (processes[j].burst_time > 0 && processes[j].priority > highest_priority) {
                highest_priority = processes[j].priority;
                highest_priority_idx = j;
            }
        }

        // If no process is found, break the loop
        if (highest_priority_idx == -1)
            break;

        // Execute the process with the highest priority
        current_time += processes[highest_priority_idx].burst_time;
        processes[highest_priority_idx].completion_time = current_time;
        processes[highest_priority_idx].turnaround_time = processes[highest_priority_idx].completion_time;
        processes[highest_priority_idx].waiting_time = processes[highest_priority_idx].turnaround_time - processes[highest_priority_idx].burst_time;
        
        total_waiting_time += processes[highest_priority_idx].waiting_time;
        total_turnaround_time += processes[highest_priority_idx].turnaround_time;

        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[highest_priority_idx].process_id, processes[highest_priority_idx].priority,
               processes[highest_priority_idx].burst_time, processes[highest_priority_idx].completion_time, processes[highest_priority_idx].turnaround_time,
               processes[highest_priority_idx].waiting_time);

        processes[highest_priority_idx].burst_time = 0; // Mark the process as completed
    }

    printf("Average Waiting Time: %.2f\n", (float)total_waiting_time / n);
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter burst time and priority for each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        processes[i].process_id = i + 1;
        printf("Burst time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
    }

    calculateTimes(processes, n);

    return 0;
}
